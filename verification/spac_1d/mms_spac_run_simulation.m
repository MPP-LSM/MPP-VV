function [comp_soln, manu_soln, source, liq_sat, rel_perm] = ...
        mms_spac_run_simulation(grid_factors, mpp_exec_dir, exec_name, verbose)
% [comp_soln, manu_soln, perm, source,] = MMS_SPAC_RUN_SIMULATION(nxs, mpp_exec_dir, exec_name, verbose)
% Runs the MMS SPAC problem for multiple spatial resolutions and returns
% computed and manufactured solutions.
%
% Input arguments:
%   grid_factors - Grid factors
%   mpp_exec_dir - Path to MPP library directory
%   exec_name    - Name of the MPP exectuable that will be run
%   verbose      - Turns on/off verbosity
%
% Output values:
%   comp_soln - Computed solution
%   manu_soln - Manufactured solution
%   perm      - Manufactured permeabilty
%   source    - Source term associated with manufactured solution
%   liq_sat   - Liquid saturation associated with manufactured solution
%   rel_perm  - Relative permeability associated with manufactured solution
%

% +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
% Run the simulation at multiple spatial resultions
% +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
for iprob = 1:length(grid_factors)
    grid_factor = grid_factors(iprob);
    ocount = 0;
    ocount=ocount+1;option{ocount}='-pc_type'              ;option_value{ocount}=sprintf('lu');
    ocount=ocount+1;option{ocount}='-grid_factor'          ;option_value{ocount}=sprintf('%d',grid_factor);
    ocount=ocount+1;option{ocount}='-snes_view_solution '  ;option_value{ocount}=sprintf('binary:%s.computed_soln_%d.bin',exec_name,grid_factor);fname_comp_soln = option_value{ocount}(8:end);
    ocount=ocount+1;option{ocount}='-view_true_solution'   ;option_value{ocount}=sprintf('%s.true_soln_%d.bin',exec_name,grid_factor)           ;fname_true_soln = option_value{ocount};
    ocount=ocount+1;option{ocount}='-view_source'          ;option_value{ocount}=sprintf('%s.source_%d.bin',exec_name,grid_factor)              ;fname_source    = option_value{ocount};
    ocount=ocount+1;option{ocount}='-view_liq_saturation'  ;option_value{ocount}=sprintf('%s.liq_sat_%d.bin',exec_name,grid_factor)             ;fname_liq_sat   = option_value{ocount};
    ocount=ocount+1;option{ocount}='-view_rel_permeability';option_value{ocount}=sprintf('%s.rel_perm_%d.bin',exec_name,grid_factor)            ;fname_rel_perm  = option_value{ocount};
    
    option       = add_whitespace_padding(option);
    option_value = add_whitespace_padding(option_value);
    
    % Create the command to run the executable
    cmd_txt= ['(cd ' mpp_exec_dir '; \'  char(10)...
        './' exec_name ' \' char(10)];
    for ii = 1:length(option)
        cmd_txt = [cmd_txt option{ii} ' ' option_value{ii} ' \' char(10)];
    end
    cmd_txt = [cmd_txt ')' char(10)];
    
    if (verbose); disp(cmd_txt); end;
    
    system(cmd_txt);
    
    % Read the binary output generated by the run
    comp_soln{iprob}  = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_comp_soln));
    manu_soln{iprob}  = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_true_soln));
    source{iprob}     = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_source));
    liq_sat{iprob}    = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_liq_sat));
    rel_perm{iprob}   = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_rel_perm));
end