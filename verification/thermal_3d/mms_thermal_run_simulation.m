function [comp_soln, manu_soln, thermal_cond, source] = ...
        mms_thermal_run_simulation(nxs, problem_dim, mpp_exec_dir, exec_name, verbose)
% [comp_soln, manu_soln, perm, source,] = MMS_THERMAL_RUN_SIMULATION(nxs, mpp_exec_dir, exec_name, verbose)
% Runs the MMS thermal problem for multiple spatial resolutions and returns
% true and manufactured solutions.
%
% Input arguments:
%   nxs          - Number of points in each direction
%   problem_dim  - 1/2/3 dimensional problem
%   mpp_exec_dir - Path to MPP library directory
%   exec_name    - Name of the MPP exectuable that will be run
%   verbose      - Turns on/off verbosity
%
% Output values:
%   comp_soln    - Computed solution of temperature
%   manu_soln    - Manufactured solution of temperature
%   thermal_cond - Manufactured solution of thermal conductivity
%   source       - Source term associated with manufactured solution
%

count = 0;
for nx = nxs
    count = count + 1;
    
    ocount = 0;
    ocount=ocount+1;option{ocount}='-temperature_ksp_monitor';option_value{ocount}='';
    ocount=ocount+1;option{ocount}='-temperature_pc_type'    ;option_value{ocount}=sprintf('lu');
    ocount=ocount+1;option{ocount}='-problem_type '           ;option_value{ocount}=sprintf('%d',problem_dim);    
    switch problem_dim
        case 1
            ocount=ocount+1;option{ocount}='-nx';option_value{ocount}=sprintf('%d',nx);
        case 2
            ocount=ocount+1;option{ocount}='-nx';option_value{ocount}=sprintf('%d',nx);
            ocount=ocount+1;option{ocount}='-ny';option_value{ocount}=sprintf('%d',nx);
        case 3
            ocount=ocount+1;option{ocount}='-nx';option_value{ocount}=sprintf('%d',nx);
            ocount=ocount+1;option{ocount}='-ny';option_value{ocount}=sprintf('%d',nx);
            ocount=ocount+1;option{ocount}='-nz';option_value{ocount}=sprintf('%d',nx);
    end    
    ocount=ocount+1;option{ocount}='-temperature_ksp_view_solution ' ;option_value{ocount}=sprintf('binary:%s.computed_soln_%02d_%03d.bin',exec_name,problem_dim,nx);fname_comp_soln  = option_value{ocount}(8:end);
    ocount=ocount+1;option{ocount}='-view_true_solution'             ;option_value{ocount}=sprintf('%s.true_soln_%02d_%03d.bin',exec_name,problem_dim,nx)           ;fname_true_soln  = option_value{ocount};
    ocount=ocount+1;option{ocount}='-view_thermal_cond'              ;option_value{ocount}=sprintf('%s.thermal_cond_%02d_%03d.bin',exec_name,problem_dim,nx)        ;fname_therm_cond = option_value{ocount};
    ocount=ocount+1;option{ocount}='-view_source'                    ;option_value{ocount}=sprintf('%s.source_%02d_%03d.bin',exec_name,problem_dim,nx)              ;fname_source     = option_value{ocount};
    
    option       = add_whitespace_padding(option);
    option_value = add_whitespace_padding(option_value);
    
    % Create the command to run the executable
    cmd_txt= ['(cd ' mpp_exec_dir '; \'  char(10)...
        './' exec_name ' \' char(10)];
    for ii = 1:length(option)
        cmd_txt = [cmd_txt option{ii} ' ' option_value{ii} ' \' char(10)];
    end
    cmd_txt = [cmd_txt ')' char(10)];
    
    if (verbose);  disp(cmd_txt); end;
    system(cmd_txt);
    
    % Read the binary output generated by the run
    comp_soln{count}  = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_comp_soln));
    manu_soln{count}  = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_true_soln));
    thermal_cond{count}   = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_therm_cond));
    source{count} = PetscBinaryRead(sprintf('%s/%s',mpp_exec_dir,fname_source));
    
end
